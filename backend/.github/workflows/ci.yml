name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Test Frontend
  frontend-tests:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'frontend') || contains(github.event.commits[0].modified, 'frontend/') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || echo "No lint script found"

      - name: Run frontend type checking
        run: |
          cd frontend
          npm run type-check || echo "No type-check script found"

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false || echo "No tests found"

      - name: Test frontend build
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.example.com
          NEXT_PUBLIC_FIREBASE_CONFIG: '{}'

  # Test Backend
  backend-tests:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'backend') || contains(github.event.commits[0].modified, 'backend/') || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend linting
        run: |
          cd backend
          npm run lint || echo "No lint script found"

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "No tests found"

      - name: Validate serverless config
        run: |
          cd backend
          npm install -g serverless@3
          serverless print || echo "Serverless config validation failed"

      - name: Validate Lambda handlers exist
        run: |
          cd backend
          echo "Checking Lambda handler files..."
          
          # Check if handler files exist for each function
          missing_handlers=()
          
          if [ ! -f "src/functions/students/handler.js" ]; then
            missing_handlers+=("src/functions/students/handler.js")
          fi
          
          if [ ! -f "src/functions/recruiters/handler.js" ]; then
            missing_handlers+=("src/functions/recruiters/handler.js")
          fi
          
          if [ ! -f "src/functions/auth/handler.js" ]; then
            missing_handlers+=("src/functions/auth/handler.js")
          fi
          
          if [ ${#missing_handlers[@]} -gt 0 ]; then
            echo "FAILED: Missing handler files:"
            printf '%s\n' "${missing_handlers[@]}"
            exit 1
          else
            echo "SUCCESS: All Lambda handler files found"
          fi

  # Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          # Check for security vulnerabilities
          cd frontend && npm audit --audit-level=high || echo "Frontend audit completed"
          cd ../backend && npm audit --audit-level=high || echo "Backend audit completed"

      - name: Check for secrets in code
        run: |
          # Basic check for accidentally committed secrets
          if grep -r "AKIA\|sk_\|pk_\|secret_key" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "WARNING: Potential secrets found in code"
            exit 1
          else
            echo "SUCCESS: No obvious secrets found"
          fi

      - name: Check file sizes
        run: |
          # Warn about large files
          find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "WARNING: Large file detected: $file"
          done

  # Dependency Analysis
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for outdated dependencies
        run: |
          echo "## Dependency Status" >> $GITHUB_STEP_SUMMARY
          
          cd frontend
          echo "### Frontend Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated || echo "Frontend dependencies checked" >> $GITHUB_STEP_SUMMARY
          
          cd ../backend
          echo "### Backend Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated || echo "Backend dependencies checked" >> $GITHUB_STEP_SUMMARY

  # Environment Validation
  env-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate environment files
        run: |
          echo "## Environment Validation" >> $GITHUB_STEP_SUMMARY
          
          # Check if .env.example files exist
          if [ -f "frontend/.env.example" ]; then
            echo "SUCCESS: Frontend .env.example found" >> $GITHUB_STEP_SUMMARY
          else
            echo "WARNING: Frontend .env.example missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "backend/.env.example" ]; then
            echo "SUCCESS: Backend .env.example found" >> $GITHUB_STEP_SUMMARY
          else
            echo "WARNING: Backend .env.example missing" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check required config files
        run: |
          # Check for required configuration files
          files_to_check=(
            "frontend/package.json"
            "frontend/netlify.toml"
            "backend/package.json"
            "backend/serverless.yml"
          )
          
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "SUCCESS: $file exists"
            else
              echo "FAILED: $file missing"
              exit 1
            fi
          done

  # Generate build info
  build-info:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build summary
        run: |
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          
          # Count files changed
          echo "**Files changed:** $(git diff --name-only HEAD^ HEAD | wc -l)" >> $GITHUB_STEP_SUMMARY
          
          # Show which areas were modified
          if git diff --name-only HEAD^ HEAD | grep -q "frontend/"; then
            echo "**Frontend:** Modified" >> $GITHUB_STEP_SUMMARY
          fi
          
          if git diff --name-only HEAD^ HEAD | grep -q "backend/"; then
            echo "**Backend:** Modified" >> $GITHUB_STEP_SUMMARY
          fi